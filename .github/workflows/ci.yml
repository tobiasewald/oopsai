name: Oops.ai CI Pipeline

on:
  push:
    branches: [ master ]

env:
  CRITICALITY_THRESHOLD: 8.0
  KUBE_NAMESPACE: oops-ai
  DEPLOYMENT_NAME: oops-ai-frontend
  OLLAMA_API_URL: ${{ secrets.OLLAMA_API_URL }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:

  renovate:
    runs-on: self-hosted
    steps:
      - name: Run Renovate via Docker
        run: |
          docker run --rm \
            -e RENOVATE_TOKEN=${{ secrets.RENOVATE_TOKEN }} \
            -e RENOVATE_PLATFORM=github \
            -e RENOVATE_REPOSITORIES=tobiasewald/oopsai \
            renovate/renovate

  trivy_scan:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy
        run: |
          docker run --rm -v ${{ github.workspace }}:/project aquasec/trivy fs /project > trivy-report.json

  owasp_scan:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Run OWASP Dependency Check
        run: |
          scripts/run_owasp.sh

  ai_analysis:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Run LLM Analysis
        run: |
          pip install requests
          python scripts/ai_processor.py
          ./scripts/check_criticality.sh

  deploy_production:
    needs: ai_analysis
    runs-on: self-hosted
    env:
      KUBE_NAMESPACE: oops-ai
      DEPLOYMENT_NAME: oops-ai-frontend
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/ -n $KUBE_NAMESPACE

  auto_rollback:
    if: failure()
    needs: ai_analysis
    runs-on: self-hosted
    env:
      KUBE_NAMESPACE: oops-ai
      DEPLOYMENT_NAME: oops-ai-frontend
    steps:
      - uses: actions/checkout@v3
      - name: Rollback Deployment
        run: |
          echo "Critical vulnerabilities detected! Initiating rollback..."
          kubectl rollout undo deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
          ./scripts/send_rollback_notification.sh

  discord_notify:
    needs: ai_analysis
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Notify Discord
        run: |
          curl -sL https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe -o jq.exe
          $CRIT = ./jq.exe -r '.criticality' ai_response.json
          $COMMENT = ./jq.exe -r '.comment' ai_response.json
          $MEME = ./jq.exe -r '.meme' ai_meme.json
          $payload = ./jq.exe -n --arg crit "$CRIT" --arg comment "$COMMENT" --arg meme "$MEME" '{content: "üö® **Sicherheitsanalyse abgeschlossen**\n\nüî¢ *Criticality:* \($crit)/10\nüß† *Kommentar:* \($comment)\n\nüåù *Meme:* \($meme)"}'
          curl -X POST -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK"
